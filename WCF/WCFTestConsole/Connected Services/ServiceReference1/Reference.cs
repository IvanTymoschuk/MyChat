//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFTestConsole.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF.Classes")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.UserDTO[] FriendsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.RoomDTO[] RoomsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.UserDTO[] Friends {
            get {
                return this.FriendsField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendsField, value) != true)) {
                    this.FriendsField = value;
                    this.RaisePropertyChanged("Friends");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConfirmed {
            get {
                return this.IsConfirmedField;
            }
            set {
                if ((this.IsConfirmedField.Equals(value) != true)) {
                    this.IsConfirmedField = value;
                    this.RaisePropertyChanged("IsConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.RoomDTO[] Rooms {
            get {
                return this.RoomsField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomsField, value) != true)) {
                    this.RoomsField = value;
                    this.RaisePropertyChanged("Rooms");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF.Classes")]
    [System.SerializableAttribute()]
    public partial class RoomDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPublishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.UserDTO UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.UserDTO[] usersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublish {
            get {
                return this.IsPublishField;
            }
            set {
                if ((this.IsPublishField.Equals(value) != true)) {
                    this.IsPublishField = value;
                    this.RaisePropertyChanged("IsPublish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.UserDTO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.UserDTO[] users {
            get {
                return this.usersField;
            }
            set {
                if ((object.ReferenceEquals(this.usersField, value) != true)) {
                    this.usersField = value;
                    this.RaisePropertyChanged("users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AttachDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF.Classes")]
    [System.SerializableAttribute()]
    public partial class AttachDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.MessageDTO MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.MessageDTO Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF.Classes")]
    [System.SerializableAttribute()]
    public partial class MessageDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.AttachDTO[] AttachesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeSendedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.RoomDTO RoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsole.ServiceReference1.UserDTO SenderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.AttachDTO[] Attaches {
            get {
                return this.AttachesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachesField, value) != true)) {
                    this.AttachesField = value;
                    this.RaisePropertyChanged("Attaches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeSended {
            get {
                return this.DateTimeSendedField;
            }
            set {
                if ((this.DateTimeSendedField.Equals(value) != true)) {
                    this.DateTimeSendedField = value;
                    this.RaisePropertyChanged("DateTimeSended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.RoomDTO Room {
            get {
                return this.RoomField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomField, value) != true)) {
                    this.RoomField = value;
                    this.RaisePropertyChanged("Room");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsole.ServiceReference1.UserDTO Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SignIn", ReplyAction="http://tempuri.org/IUser/SignInResponse")]
        WCFTestConsole.ServiceReference1.UserDTO SignIn(string Email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SignIn", ReplyAction="http://tempuri.org/IUser/SignInResponse")]
        System.Threading.Tasks.Task<WCFTestConsole.ServiceReference1.UserDTO> SignInAsync(string Email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Registration", ReplyAction="http://tempuri.org/IUser/RegistrationResponse")]
        WCFTestConsole.ServiceReference1.UserDTO Registration(string Email, string Password, string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Registration", ReplyAction="http://tempuri.org/IUser/RegistrationResponse")]
        System.Threading.Tasks.Task<WCFTestConsole.ServiceReference1.UserDTO> RegistrationAsync(string Email, string Password, string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Confirming", ReplyAction="http://tempuri.org/IUser/ConfirmingResponse")]
        bool Confirming(int user_id, int Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Confirming", ReplyAction="http://tempuri.org/IUser/ConfirmingResponse")]
        System.Threading.Tasks.Task<bool> ConfirmingAsync(int user_id, int Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ResendCode", ReplyAction="http://tempuri.org/IUser/ResendCodeResponse")]
        bool ResendCode(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ResendCode", ReplyAction="http://tempuri.org/IUser/ResendCodeResponse")]
        System.Threading.Tasks.Task<bool> ResendCodeAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/getSeachPeople", ReplyAction="http://tempuri.org/IUser/getSeachPeopleResponse")]
        WCFTestConsole.ServiceReference1.UserDTO[] getSeachPeople(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/getSeachPeople", ReplyAction="http://tempuri.org/IUser/getSeachPeopleResponse")]
        System.Threading.Tasks.Task<WCFTestConsole.ServiceReference1.UserDTO[]> getSeachPeopleAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add_Friend", ReplyAction="http://tempuri.org/IUser/Add_FriendResponse")]
        void Add_Friend(int your_id, int friend_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add_Friend", ReplyAction="http://tempuri.org/IUser/Add_FriendResponse")]
        System.Threading.Tasks.Task Add_FriendAsync(int your_id, int friend_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add_Room", ReplyAction="http://tempuri.org/IUser/Add_RoomResponse")]
        void Add_Room(int your_id, int room_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add_Room", ReplyAction="http://tempuri.org/IUser/Add_RoomResponse")]
        System.Threading.Tasks.Task Add_RoomAsync(int your_id, int room_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RemoveFriend", ReplyAction="http://tempuri.org/IUser/RemoveFriendResponse")]
        void RemoveFriend(int your_id, int friend_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RemoveFriend", ReplyAction="http://tempuri.org/IUser/RemoveFriendResponse")]
        System.Threading.Tasks.Task RemoveFriendAsync(int your_id, int friend_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RemoveRoom", ReplyAction="http://tempuri.org/IUser/RemoveRoomResponse")]
        void RemoveRoom(int your_id, int room_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RemoveRoom", ReplyAction="http://tempuri.org/IUser/RemoveRoomResponse")]
        System.Threading.Tasks.Task RemoveRoomAsync(int your_id, int room_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : WCFTestConsole.ServiceReference1.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<WCFTestConsole.ServiceReference1.IUser>, WCFTestConsole.ServiceReference1.IUser {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFTestConsole.ServiceReference1.UserDTO SignIn(string Email, string password) {
            return base.Channel.SignIn(Email, password);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsole.ServiceReference1.UserDTO> SignInAsync(string Email, string password) {
            return base.Channel.SignInAsync(Email, password);
        }
        
        public WCFTestConsole.ServiceReference1.UserDTO Registration(string Email, string Password, string Login) {
            return base.Channel.Registration(Email, Password, Login);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsole.ServiceReference1.UserDTO> RegistrationAsync(string Email, string Password, string Login) {
            return base.Channel.RegistrationAsync(Email, Password, Login);
        }
        
        public bool Confirming(int user_id, int Code) {
            return base.Channel.Confirming(user_id, Code);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmingAsync(int user_id, int Code) {
            return base.Channel.ConfirmingAsync(user_id, Code);
        }
        
        public bool ResendCode(int user_id) {
            return base.Channel.ResendCode(user_id);
        }
        
        public System.Threading.Tasks.Task<bool> ResendCodeAsync(int user_id) {
            return base.Channel.ResendCodeAsync(user_id);
        }
        
        public WCFTestConsole.ServiceReference1.UserDTO[] getSeachPeople(string Name) {
            return base.Channel.getSeachPeople(Name);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsole.ServiceReference1.UserDTO[]> getSeachPeopleAsync(string Name) {
            return base.Channel.getSeachPeopleAsync(Name);
        }
        
        public void Add_Friend(int your_id, int friend_id) {
            base.Channel.Add_Friend(your_id, friend_id);
        }
        
        public System.Threading.Tasks.Task Add_FriendAsync(int your_id, int friend_id) {
            return base.Channel.Add_FriendAsync(your_id, friend_id);
        }
        
        public void Add_Room(int your_id, int room_id) {
            base.Channel.Add_Room(your_id, room_id);
        }
        
        public System.Threading.Tasks.Task Add_RoomAsync(int your_id, int room_id) {
            return base.Channel.Add_RoomAsync(your_id, room_id);
        }
        
        public void RemoveFriend(int your_id, int friend_id) {
            base.Channel.RemoveFriend(your_id, friend_id);
        }
        
        public System.Threading.Tasks.Task RemoveFriendAsync(int your_id, int friend_id) {
            return base.Channel.RemoveFriendAsync(your_id, friend_id);
        }
        
        public void RemoveRoom(int your_id, int room_id) {
            base.Channel.RemoveRoom(your_id, room_id);
        }
        
        public System.Threading.Tasks.Task RemoveRoomAsync(int your_id, int room_id) {
            return base.Channel.RemoveRoomAsync(your_id, room_id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMessage", CallbackContract=typeof(WCFTestConsole.ServiceReference1.IMessageCallback))]
    public interface IMessage {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessage/SendMessage", ReplyAction="http://tempuri.org/IMessage/SendMessageResponse")]
        void SendMessage(string body, WCFTestConsole.ServiceReference1.RoomDTO room, WCFTestConsole.ServiceReference1.UserDTO sender, WCFTestConsole.ServiceReference1.AttachDTO attach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessage/SendMessage", ReplyAction="http://tempuri.org/IMessage/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string body, WCFTestConsole.ServiceReference1.RoomDTO room, WCFTestConsole.ServiceReference1.UserDTO sender, WCFTestConsole.ServiceReference1.AttachDTO attach);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessage/GetMessage")]
        void GetMessage(WCFTestConsole.ServiceReference1.MessageDTO msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageChannel : WCFTestConsole.ServiceReference1.IMessage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageClient : System.ServiceModel.DuplexClientBase<WCFTestConsole.ServiceReference1.IMessage>, WCFTestConsole.ServiceReference1.IMessage {
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string body, WCFTestConsole.ServiceReference1.RoomDTO room, WCFTestConsole.ServiceReference1.UserDTO sender, WCFTestConsole.ServiceReference1.AttachDTO attach) {
            base.Channel.SendMessage(body, room, sender, attach);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string body, WCFTestConsole.ServiceReference1.RoomDTO room, WCFTestConsole.ServiceReference1.UserDTO sender, WCFTestConsole.ServiceReference1.AttachDTO attach) {
            return base.Channel.SendMessageAsync(body, room, sender, attach);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRoom")]
    public interface IRoom {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/CreateRoom", ReplyAction="http://tempuri.org/IRoom/CreateRoomResponse")]
        void CreateRoom(WCFTestConsole.ServiceReference1.RoomDTO room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/CreateRoom", ReplyAction="http://tempuri.org/IRoom/CreateRoomResponse")]
        System.Threading.Tasks.Task CreateRoomAsync(WCFTestConsole.ServiceReference1.RoomDTO room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/SendMessageAllUsersInRoom", ReplyAction="http://tempuri.org/IRoom/SendMessageAllUsersInRoomResponse")]
        void SendMessageAllUsersInRoom(WCFTestConsole.ServiceReference1.RoomDTO room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/SendMessageAllUsersInRoom", ReplyAction="http://tempuri.org/IRoom/SendMessageAllUsersInRoomResponse")]
        System.Threading.Tasks.Task SendMessageAllUsersInRoomAsync(WCFTestConsole.ServiceReference1.RoomDTO room);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoomChannel : WCFTestConsole.ServiceReference1.IRoom, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoomClient : System.ServiceModel.ClientBase<WCFTestConsole.ServiceReference1.IRoom>, WCFTestConsole.ServiceReference1.IRoom {
        
        public RoomClient() {
        }
        
        public RoomClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoomClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateRoom(WCFTestConsole.ServiceReference1.RoomDTO room) {
            base.Channel.CreateRoom(room);
        }
        
        public System.Threading.Tasks.Task CreateRoomAsync(WCFTestConsole.ServiceReference1.RoomDTO room) {
            return base.Channel.CreateRoomAsync(room);
        }
        
        public void SendMessageAllUsersInRoom(WCFTestConsole.ServiceReference1.RoomDTO room) {
            base.Channel.SendMessageAllUsersInRoom(room);
        }
        
        public System.Threading.Tasks.Task SendMessageAllUsersInRoomAsync(WCFTestConsole.ServiceReference1.RoomDTO room) {
            return base.Channel.SendMessageAllUsersInRoomAsync(room);
        }
    }
}
